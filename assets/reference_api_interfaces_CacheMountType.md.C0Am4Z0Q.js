import{_ as t,c as d,a2 as o,o as c}from"./chunks/framework.8ycqjF2p.js";const l=JSON.parse('{"title":"Interface: CacheMountType","description":"","frontmatter":{},"headers":[],"relativePath":"reference/api/interfaces/CacheMountType.md","filePath":"reference/api/interfaces/CacheMountType.md"}'),r={name:"reference/api/interfaces/CacheMountType.md"};function a(n,e,i,s,h,u){return c(),d("div",null,e[0]||(e[0]=[o('<p><a href="./../globals.html">dw</a> / CacheMountType</p><h1 id="interface-cachemounttype" tabindex="-1">Interface: CacheMountType <a class="header-anchor" href="#interface-cachemounttype" aria-label="Permalink to &quot;Interface: CacheMountType&quot;">​</a></h1><p>This mount type allows the build container to cache directories for compilers and package managers.</p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Property</th><th>Type</th><th>Default value</th><th>Description</th></tr></thead><tbody><tr><td><code>from?</code></td><td><code>string</code></td><td><code>empty directory.</code></td><td>Build stage, context, or image name to use as a base of the cache mount.</td></tr><tr><td><code>gid?</code></td><td><code>string</code></td><td><code>0</code></td><td>Group ID for new cache directory.</td></tr><tr><td><code>id?</code></td><td><code>string</code></td><td>value of target</td><td>ID to identify separate/different caches.</td></tr><tr><td><code>mode?</code></td><td><code>string</code></td><td><code>0755</code></td><td>File mode for new cache directory in octal.</td></tr><tr><td><code>readonly?</code></td><td><code>string</code></td><td><code>undefined</code></td><td>Read-only if set.</td></tr><tr><td><code>sharing?</code></td><td><code>&quot;shared&quot;</code> | <code>&quot;private&quot;</code> | <code>&quot;locked&quot;</code></td><td><code>shared.</code></td><td>A shared cache mount can be used concurrently by multiple writers. - <code>private</code> creates a new mount if there are multiple writers. - <code>locked</code> pauses the second writer until the first one releases the mount.</td></tr><tr><td><code>source?</code></td><td><code>string</code></td><td>root of from</td><td>Subpath in the <code>from</code> to mount.</td></tr><tr><td><code>target</code></td><td><code>string</code></td><td><code>undefined</code></td><td>Mount path.</td></tr><tr><td><code>type</code></td><td><code>&quot;cache&quot;</code></td><td><code>undefined</code></td><td>-</td></tr><tr><td><code>uid?</code></td><td><code>string</code></td><td><code>0</code></td><td>User ID for new cache directory.</td></tr></tbody></table>',5)]))}const f=t(r,[["render",a]]);export{l as __pageData,f as default};
